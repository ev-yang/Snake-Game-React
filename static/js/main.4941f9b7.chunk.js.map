{"version":3,"sources":["components/Header.js","components/Home.js","components/Instructions.js","components/Snake.js","components/Food.js","components/Play.js","components/Score.js","components/EndGame.js","components/GameArea.js","App.js","reportWebVitals.js","index.js"],"names":["Header","Home","className","to","process","Instructions","Snake","x","y","style","left","top","Food","Play","snake","food","callback","delay","savedCallback","useRef","useEffect","current","id","setInterval","clearInterval","useInterval","move","map","square","score","EndGame","reset","onClick","GameArea","gameOver","path","exact","render","component","length","Score","App","document","onkeydown","keyPress","useState","getFood","setFood","setSnake","direction","setDirection","setGameOver","e","window","event","keyCode","Math","floor","random","front","newFront","newSnake","i","newFood","console","log","checkFood","checkGameOver","slice","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.4941f9b7.chunk.js","sourcesContent":["const Header = () => {\n    return (\n        <div>\n            <h1>Snake</h1>\n        </div>\n    );\n}\n\nexport default Header;","import {Link} from \"react-router-dom\";\nimport Header from \"./Header\";\n\nconst Home = () => {\n    return (\n        <div className=\"menu\">\n            <Header/>\n            <Link to={process.env.PUBLIC_URL + \"/play\"}>Start game</Link>\n            <Link to={process.env.PUBLIC_URL + \"/instructions\"}>Instructions</Link>\n        </div>\n    );\n}\n\nexport default Home;","import {Link} from \"react-router-dom\";\n\nconst Instructions = () => {\n    return (\n        <div className=\"instructions\">\n            <h2>Instructions</h2>\n            <p>Use the arrow keys to control the direction of the snake (<span className=\"green\">green</span> squares).</p>\n            <p>Eat the food (<span className=\"blue\">blue</span> squares) to grow longer.</p>\n            <p>Avoid running into yourself or the game borders.</p>\n            <Link to={process.env.PUBLIC_URL + \"/\"}>Back</Link>\n        </div>\n    );\n}\n\nexport default Instructions;","const Snake = ({x, y}) => {\n    return (\n        <div className=\"snake-square\" style={{left: x + \"%\", top: y + \"%\"}}/>\n    );\n}\n\nexport default Snake;","const Food = ({x, y}) => {\n    return (\n        <div className=\"food-square\" style={{left: x + \"%\", top: y + \"%\"}}/>\n    );\n}\n\nexport default Food;","import {useRef, useEffect} from \"react\";\nimport Snake from \"./Snake\";\nimport Food from \"./Food\";\n\nconst Play = ({snake, food, move}) => {\n    useInterval(move, 100);\n    function useInterval(callback, delay) {\n        const savedCallback = useRef();\n\n        // Remember the latest callback.\n        useEffect(() => {\n          savedCallback.current = callback;\n        }, [callback]);\n\n        // Set up the interval.\n        useEffect(() => {\n          function tick() {\n            savedCallback.current();\n          }\n          if (delay !== null) {\n            let id = setInterval(tick, delay);\n            return () => clearInterval(id);\n          }\n        }, [delay]);\n    }\n\n    return (\n        <>\n            {snake.map((square) => (\n                <Snake key={square.id} x={square.x} y={square.y} />\n            ))}\n\n            {food.map((square) => (\n                <Food key={square.id} x={square.x} y={square.y} />\n            ))}\n        </>\n    );\n}\n\nexport default Play;","const Play = ({score}) => {\n    return (\n        <>\n            <p className=\"score\">Score: {score}</p>\n        </>\n    );\n}\n\nexport default Play;","import {Link} from \"react-router-dom\";\n\nconst EndGame = ({score, reset}) => {\n    return (\n        <div className=\"end-game\">\n            <h2>Game over!</h2>\n            <p>Your score: {score}</p>\n            <Link to={process.env.PUBLIC_URL + \"/play\"} onClick={reset}>Play again</Link>\n            <Link to={process.env.PUBLIC_URL + \"/\"} onClick={reset}>Home</Link>\n        </div>\n    );\n}\n\nexport default EndGame;","import {BrowserRouter as Router, Route, Redirect} from \"react-router-dom\";\nimport Home from \"./Home\";\nimport Instructions from \"./Instructions\";\nimport Play from \"./Play\";\nimport Score from \"./Score\";\nimport EndGame from \"./EndGame\";\n\nconst GameArea = ({snake, food, move, gameOver, reset}) => {\n    return (\n        <Router>\n        <div className=\"game-area\">\n            <Route path={process.env.PUBLIC_URL + \"/\"} exact render={() => (<Home/>)}/>\n            <Route path={process.env.PUBLIC_URL + \"/instructions\"} exact component={Instructions}/>\n            <Route path={process.env.PUBLIC_URL + \"/play\"} exact>\n                {gameOver ? <Redirect to={process.env.PUBLIC_URL + \"/end\"}/> : <Play snake={snake} food={food} move={move}/>}\n            </Route>\n            <Route path={process.env.PUBLIC_URL + \"/end\"} exact render={() => (<EndGame score={snake.length - 3} reset={reset}/>)}/>\n        </div>\n        <Route path={process.env.PUBLIC_URL + \"/play\"} exact render={() => (<Score score={snake.length - 3}/>)}/>\n        </Router>\n    );\n}\n\nexport default GameArea;","import {useState, useEffect} from \"react\";\nimport GameArea from \"./components/GameArea\";\n\nconst App = () => {\n\n  useEffect(() => {\n    document.onkeydown = keyPress;\n  }, []);\n\n  // food squares\n  const [food, setFood] = useState([getFood(1), getFood(2), getFood(3)]);\n\n  // snake squares\n  const [snake, setSnake] = useState([\n    {\n      id: 1,\n      x: 10,\n      y: 10\n    },\n    {\n      id: 2,\n      x: 12,\n      y: 10\n    },\n    {\n      id: 3,\n      x: 14,\n      y: 10\n    }\n  ]);\n\n  // snake direction\n  const [direction, setDirection] = useState(\"right\");\n\n  // game over\n  const [gameOver, setGameOver] = useState(false);\n\n  // move snake\n  function keyPress(e) {\n    e = e || window.event;\n    if (e.keyCode === 37) {\n      setDirection(\"left\");\n    } else if (e.keyCode === 38) {\n      setDirection(\"up\");\n    } else if (e.keyCode === 39) {\n      setDirection(\"right\");\n    } else if (e.keyCode === 40) {\n      setDirection(\"down\");\n    }\n  }\n\n  // move snake forward one unit in current direction\n  function moveSnake() {\n    let front = snake[snake.length - 1];\n    let newFront = {\n      id: snake[0].id,\n      x: front.x,\n      y: front.y\n    }\n    if (direction === \"left\") {\n      newFront.x = front.x - 2;\n    } else if (direction === \"up\") {\n      newFront.y = front.y - 2;\n    } else if (direction === \"right\") {\n      newFront.x = front.x + 2;\n    } else if (direction === \"down\") {\n      newFront.y = front.y + 2;\n    }\n    let newSnake = [...snake, newFront];\n    if (!checkFood(newSnake) && !checkGameOver(newSnake)) {\n      setSnake(newSnake.slice(1));\n    }\n  }\n\n  // check if snake found food. if so, enlarge snake.\n  function checkFood(snake) {\n    let front = snake[snake.length - 1];\n    for (let i = 0; i < food.length; i++) {\n      let square = food[i];\n      if (square.x === front.x && square.y === front.y) {\n        // enlarge snake\n        snake[snake.length - 1].id = snake.length;\n        setSnake(snake);\n        // new food\n        let newFood = [...food];\n        newFood[i] = getFood(i + 1);\n        console.log(newFood);\n        setFood(newFood);\n        return true;\n      }\n    }\n    return false;\n  }\n\n  // check if snake hit border or self. if so, end game.\n  function checkGameOver(snake) {\n    let front = snake[snake.length - 1];\n    if (front.x < 0 || front.y < 0 || front.x > 100 || front.y > 100) {\n      setGameOver(true);\n      return true;\n    }\n    for (let i = 0; i < snake.length - 1; i++) {\n      let square = snake[i];\n      if (square.x === front.x && square.y === front.y) {\n        setGameOver(true);\n        return true;\n      }\n    }\n    return false;\n  }\n\n  // random coordinates for food from 0 to 50\n  function getFood(id) {\n    let x = Math.floor((Math.random() * 50)) * 2;\n    let y = Math.floor((Math.random() * 50)) * 2;\n    return {\n      id: id,\n      x: x,\n      y: y\n    };\n  }\n\n  // resets game to play again\n  function resetGame() {\n    setGameOver(false);\n    setDirection(\"right\");\n    setSnake([\n      {\n        id: 1,\n        x: 10,\n        y: 10\n      },\n      {\n        id: 2,\n        x: 12,\n        y: 10\n      },\n      {\n        id: 3,\n        x: 14,\n        y: 10\n      }\n    ]);\n    setFood([getFood(1), getFood(2), getFood(3)]);\n  }\n\n  return (\n    <div className=\"App\">\n      <GameArea snake={snake} food={food} move={moveSnake} gameOver={gameOver} reset={resetGame}/>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}